#include <iostream>
#include <cmath>
#include <math.h>
#include <fstream>
#include <string>
#include <mpi.h>
using namespace std;
float minproc(float* a, int x, int y)
{
	float mina = a[x];
	for (int i = x + 1; i < y + 1; i++)
		if (a[i] < mina) mina = a[i];
	return mina;
}

int main(int argc, char* argv[])
{
	int n = 4, m = 5, rank, buf[2];
	int size = n + 1;
	float min, mina;
	float* all = new float[m * n];
	string* namefiles = new string[n];
	namefiles[0] = "File0.txt";
	namefiles[1] = "File1.txt";
	namefiles[2] = "File2.txt";
	namefiles[3] = "File3.txt";

	//×òåíèå èç ôàéëà
	ifstream f0(namefiles[0]);
	f0 >> min;
	cout << min;
	f0.close();

	MPI_Comm comm = MPI_COMM_WORLD;
	MPI_Status status;

	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);

	if (size > n * m) size = n;
	int ibeg, iend;
	ibeg = m * rank;
	if (rank == 0)
	{
		for (int i = 0; i < n; i++)
		{
			ifstream f(namefiles[i]);
			for (int j = i * m; j < (i + 1) * m; j++)  //for(int j=0; j<m; j++)
				all[j] << f;                     //a[j]<<f;
			f.close();
			//MPI_Bcast(a, m, MPI_Float, 0, MPI_COMM_WORLD);
		}

		MPI_Bcast(all, m * n, MPI_FLOAT, 0, MPI_COMM_WORLD);
		//k=N/size;
	}
	else iend = (rank + 1) * m - 1;

	mina = minproc(all, ibeg, iend);

		if (rank == 0)
		{
			if (min > mina) min = mina;
			for (int i = 1; i < size; i++)
			{
				MPI_Recv(&mina, 1, MPI_FLOAT, i, 0, MPI_COMM_WORLD, &status);
				cout << "min of process number " << i << " = " << mina << "\n";
				if (min > mina) min = mina;
			}
		}
		else MPI_Send(&mina, 1, MPI_FLOAT, 0, 0, MPI_COMM_WORLD);

	//Âûâîä ðåçóëüòàòà
	if (rank == 0)
	{
		ofstream h("FileReq.txt");
		h << min;
		h.close();
	}
	MPI_Finalize();
	return 0;
}

















//Èíäèâèäóàëêà 2. MPI. Âàðèàíò 6.
//Íàéòè min ýë.-ò n ïîñëåä.-åé èç n ôàéëîâ
#include <iostream>

#include <cmath>

#include "stdafx.h"

#include <stdio.h>

#include <fstream>

#include "mpi.h"


#define _USE_MATH_DEFINES


#include <ctime>

#include <iomanip>
 
using namespace std;
 
// Ãëàâíàÿ ôóíêöèÿ ïðîãðàììû
 
int main(int argc, char **argv)


{
 
    // Îáúÿâëåíèå ïåðåìåííûõ
 
   
int n = 4;

string *namefiles= new string[n];

namefiles[0]="File0.txt";

namefiles[1]="File1.txt";

namefiles[2]="File2.txt";

namefiles[3]="File3.txt";


int myid, numprocs, i;

int *a = new int[n];
 
double min;

int namelen;

char processor_name[MPI_MAX_PROCESSOR_NAME];
 
    // Èíèöèàëèçàöèÿ ïîäñèñòåìû MPI
 
MPI_Init(&argc, &argv);
 
    // Ïîëó÷èòü ðàçìåð êîììóíèêàòîðà MPI_COMM_WORLD
 
// (îáùåå ÷èñëî ïðîöåññîâ â ðàìêàõ çàäà÷è)

MPI_Comm_size(MPI_COMM_WORLD, &numprocs);
 
    // Ïîëó÷èòü íîìåð òåêóùåãî ïðîöåññà â ðàìêàõ

// êîììóíèêàòîðà MPI_COMM_WORLD
 
MPI_Comm_rank(MPI_COMM_WORLD, &myid);
 
    
MPI_Get_processor_name(processor_name, &namelen);
 
   
 if (myid == 0)
 
 //   {
 
        
//for (i = 0; i<n; i++)
 
      
 // {
           
// a[i] = rand() % 9 + 1;
 // ãåíåðèðóåì ñëó÷àéíûå ÷èñëà 
 
            min = 0;
 
      
 // }
   
// }
 
   
 // Ðàññûëêà êîëè÷åñòâà èíòåðâàëîâ âñåì ïðîöåññàì (â òîì ÷èñëå è ñåáå)
 
  
 MPI_Bcast(&n, 1, MPI_INT, 0, MPI_COMM_WORLD);
 
   
 // Îáñ÷èòûâàíèå òî÷êè, çàêðåïëåííîé çà ïðîöåññîì
 
  
  for (i = myid + 1; i <= n-1; i += numprocs)
 
    
{
        if (a[i]<min) min = a[i];
    }
 
    // Åñëè ýòî ãëàâíûé ïðîöåññ, âûâîä ïîëó÷åííîãî ðåçóëüòàòà
 
    
if (myid == 0)
 
    
{
        
  cout << "Vector:" << a[i] << "\n";
      
  cout << "Min:" << min << "\n";
 
      
 delete[] a; // îñâîáîæäåíèå ïàìÿòè
 
   
 }
 
    // Îñâîáîæäåíèå ïîäñèñòåìû MPI
 
   
 MPI_Finalize();
 
   
 return 0;
 

}


//Èíäèâèäóàëêà 2 (2).
#include <iostream>
#include <cmath>
#include <math.h>
#include <fstream>
#include <string>
#include "mpi.h"
using namespace std;
float minproc(float *a, int x, int y)
{
float mina=a[x];
for (int i=x+1; i<y+1; i++)
if (a[i]<mina) mina=a[i];
return mina;
}

int main(int argc, char *argv[])
{
int n = 4, m=5, rank;
int size = n+1;
float min, mina;
float *all=new float[m*n];
string *namefiles= new string[n];
namefiles[0]="File0.txt";
namefiles[1]="File1.txt";
namefiles[2]="File2.txt";
namefiles[3]="File3.txt";

//×òåíèå èç ôàéëà
ifstream f0(namefiles[0]);
f0>>min;
cout<<min;
f0.close();

 MPI_Comm comm = MPI_COMM_WORLD;
 MPI_Status status;

MPI_Init(&argc, &argv);
MPI_Comm_size(MPI_COMM_WORLD, &size);
MPI_Comm_rank(MPI_COMM_WORLD, &rank);

if (size>n*m) size=n;
if (rank==0)
  for (int i=0; i<n; i++)
  {
      ifstream f(namefiles[i]);
      for (int j=i*m; j<(i+1)*m; j++)  //for(int j=0; j<m; j++)
        all[j]<<f;                     //a[j]<<f;
  f.close();
                                      //MPI_Bcast(a, m, MPI_Float, 0, MPI_COMM_WORLD);
  }
  
  MPI_Bcast(all, m*n, MPI_Float, 0, MPI_COMM_WORLD);
//k=N/size;
int ibeg, iend;
ibeg=m*rank;
else iend=(rank+1)*m-1;

mina=minproc(all, ibeg, iend)

if(rank==0)
{
    if (min>mina) min=mina;
    for (int i=1; i<size; i++)
    {
        MPI_Recv(&mina, 1, MPI_Float, i, 0, MPI_COMM_WORLD, &status);
        cout<<"min of process number "<<i<<" = "<<mina<<"\n";
        if (min>mina) min=mina;
    }
}
else MPI_Send(&mina, 1, MPI_Float, 0, 0, MPI_COMM_WORLD);

//Âûâîä ðåçóëüòàòà
if(rank==0)
{
ofstream h("FileReq.txt");
h<<min;
h.close();
}
MPI_Finalize();
return 0;
}
